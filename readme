MyShell - A Simple Unix Command Line Interpreter
================================================

Description
-----------
MyShell is a simple shell program developed as part of an Operating Systems course project.
It allows users to execute both internal and external commands, perform I/O redirection,
run commands in the background, and execute scripts from batch files.

This shell works in interactive mode or batch mode, and supports a basic set of internal commands.

Internal Commands
-----------------
1. cd <directory>
   - Changes the current working directory to <directory>.
   - If no directory is provided, it prints the current directory.
   - If the directory does not exist, an error is displayed.
   - This also updates the PWD environment variable.

2. clr
   - Clears the screen.

3. dir <directory>
   - Lists the contents of the specified directory.

4. environ
   - Prints all the environment variables.

5. echo <comment>
   - Displays <comment> on the screen.
   - Multiple spaces/tabs between words are reduced to one.

6. help
   - Displays this help manual using the 'more' filter.

7. pause
   - Pauses the shell until the user presses the Enter key.

8. quit
   - Exits the shell.

Command Execution
-----------------
- Any command not listed above is assumed to be an external program.
- MyShell uses fork() and execvp() to launch external programs as child processes.

Environment Variables
---------------------
- When MyShell starts, it sets the following environment variables:
    shell  = <full_path_to_myshell_executable>
    parent = <full_path_to_myshell_executable> (for child processes)

Input/Output Redirection
------------------------
- You can redirect input and/or output using the following symbols:

    < inputfile       : reads input from 'inputfile' instead of keyboard
    > outputfile      : writes output to 'outputfile', overwriting if it exists
    >> outputfile     : appends output to 'outputfile' if it exists, or creates it

- These redirections also work with internal commands like dir, environ, echo, and help.

Background Execution
--------------------
- To execute a command in the background, add '&' at the end:

    example:
        sleep 10 &

- This runs the command without waiting for it to finish.

Batch Mode
----------
- You can run a series of commands from a file by launching MyShell with a filename:

    ./myshell batchfile

- Each line in the file will be treated as a command.

Prompt
------
- The shell prompt shows the full path of the current working directory.

Building the Shell
------------------
To compile MyShell, type:

    make

This will generate an executable named 'myshell'.

Usage Examples
--------------
1. Interactive mode:
    ./myshell

2. Batch mode:
    ./myshell script.txt

3. I/O redirection:
    ls -l > output.txt

4. Background execution:
    find / -name '*.c' &

5. Combined:
    sort < input.txt > output.txt &

Notes
-----
- All command line tokens must be separated by spaces (including '<', '>', '>>', and '&').
- Do not include binary files in your submission.
- Ensure the shell compiles successfully by running 'make' in a clean directory.

Author
------
<rawan tareq baker>
<220221288>
Operating Systems - Project 1
<<<<<<< HEAD
***********
=======
********************
>>>>>>> 4167631 (حدثت بعض الأوامر)
# MyShell - برنامج بسيط لتفسير أوامر يونكس

## الوصف  
برنامج MyShell هو شل (واجهة سطر أوامر) بسيط طورناه كجزء من مشروع في مادة أنظمة التشغيل.  
يسمح البرنامج بتنفيذ أوامر داخلية وخارجية، يدعم إعادة توجيه الإدخال والإخراج، يشغل الأوامر في الخلفية، ويقدر يقرأ أوامر من ملفات دفعة.

يمكن تشغيل MyShell بوضعين:  
- تفاعلي (interactive) يطلب أوامر من المستخدم  
- دفعي (batch) يقرأ الأوامر من ملف وينفذها واحدة واحدة.

## الأوامر الداخلية المدعومة  
1. `cd <directory>`  
   - يغير المجلد الحالي إلى `<directory>`.  
   - إذا ما حددت مجلد، يعرض لك المجلد الحالي.  
   - لو المجلد غير موجود، يعرض رسالة خطأ.  
   - يحدّث متغير البيئة `PWD`.  

2. `clr`  
   - يمسح الشاشة.

3. `dir <directory>`  
   - يعرض محتويات المجلد المحدد.

4. `environ`  
   - يعرض جميع متغيرات البيئة.

5. `echo <comment>`  
   - يعرض التعليق `<comment>` على الشاشة، مع تبسيط المسافات.

6. `help`  
   - يعرض دليل الاستخدام باستخدام أمر `more`.

7. `pause`  
   - يوقف البرنامج مؤقتًا حتى تضغط Enter.

8. `quit`  
   - يخرج من الشل.

## تنفيذ الأوامر  
- أي أمر غير من الأوامر الداخلية يُفترض أنه برنامج خارجي.  
- يستخدم MyShell دوال `fork()` و `execvp()` لتنفيذ هذه البرامج كعمليات فرعية.

## متغيرات البيئة  
- عند تشغيل MyShell، يتم تعيين متغيرات:  
  - `shell` مع المسار الكامل لملف البرنامج.  
  - `parent` للأطفال ليحتوي نفس المسار.

## إعادة توجيه الإدخال والإخراج  
- يدعم MyShell الرموز:  
  - `< inputfile` لقراءة الإدخال من ملف بدلاً من الكيبورد.  
  - `> outputfile` لكتابة الإخراج إلى ملف مع استبداله.  
  - `>> outputfile` لكتابة الإخراج مع الإضافة إلى الملف إن وجد.  

- هذه الخصائص تعمل مع الأوامر الداخلية مثل `dir`, `environ`, `echo`, و `help`.

## التنفيذ في الخلفية  
- لو أضفت `&` في نهاية الأمر، يتم تنفيذ الأمر في الخلفية دون انتظار انتهائه.  
  مثال:  
  `sleep 10 &`

## الوضع الدفعي  
- يمكن تشغيل أوامر من ملف:  
  `./myshell batchfile`  
- كل سطر في الملف يُعتبر أمر منفذ.

## موجه الأوامر  
- يظهر في الموجه المسار الكامل للمجلد الحالي.

## كيفية البناء والتشغيل  
- لبناء البرنامج، اكتب:  
  `make`  
- لتشغيل البرنامج:  
  - تفاعلي:  
    `./myshell`  
  - دفعي:  
    `./myshell script.txt`

## ملاحظات مهمة  
- يجب فصل جميع الرموز (<, >, >>, &) عن الأوامر بمسافة أو أكثر.  
- لا ترسل ملفات تنفيذية أو ملفات كائنات في التسليم.  
- تأكد أن البرنامج يترجم بنجاح على مجلد فارغ باستخدام `make`.

---

## فريق العمل  
HEAD
- روان طارق بكر(220221288)  
=======
- روان طارق بكر (220221288)  
- شهد الحداد  
- الاء أبو صلاح (220213346)

